println "Hello World!"
println list ( "Integer addition: " + 2 2 )
println list ( "Float addition: " + 2.3 2.1 )
println list ( "String addition: " + "foo" "bar" )
println list ( "Convert to string second: " + "foo" string 2 )
println list ( "Convert second to float: " + 2.0 float "3.14" )
println list ( "Simple subtraction: " - 5 42 )
println list ( "Multiply: " * 6 6 )
println list ( "Divide: " / 42.0 3.3 )

println list ( "Square root of 10: " sqrt 10 )

let x 42
println x

let x 0
while ( < x 10 )
(
    println list ( "x is: " x )
    let x + x 1
)

// (
    print "Enter number: "

    let x int readline
    if < x 500
    (
        println "It's less than 500."
    )
    (
        println "It's greater than 500."
    )
)

// "Returns a list with the solutions
    empty list when there are no solutions."

bind solveQuadratic lambda ( a b c ) ( d x1 x2 )
(
    // "Coerce them to float"
    let a float a
    let b float b
    let c float c

    let d - * b b * * 4.0 a c
    println list ( "Discriminant is: " d )
    if < d 0.0
    (
        println "No solution"
        list ( )
    )
    (
        let x1 / + - 0.0 b sqrt d * 2.0 a
        let x2 / - - 0.0 b sqrt d * 2.0 a
        println list ( "Solution 1: " x1 )
        println list ( "Solution 2: " x2 )
        list ( x1 x2 )
    )
)

let a 10
let b 11
let c 12
dump solveQuadratic 1 5 6
dump solveQuadratic 6 1 6
println list ( "Global A is: " a )
println list ( "Global B is: " b )
println list ( "Global C is: " c )

bind square lambda ( x ) ( ) ( * x x )

println square square 3

dump map fetch square list ( 1 2 3 4 5 6 7 )
dump map fetch sqrt list ( 1 2 3 4 5 6 7 )
dump map lambda ( x ) ( ) ( * 2 x ) list ( 10 20 30 )

bind fact lambda ( n ) ( ) 
(
    if ( = n 1 )
        ( 1 )
        ( * n fact - n 1 )
)

println list ( "Factorial of 5 is: " fact 5 )

bind fiborunner lambda ( n s a b ) ( )
(
    if = n 0 ( s )
    (
        fiborunner - n 1  + s a  s  a
    )
)

bind fibo lambda ( n ) ( )
(
    if ( < n 3 ) ( 1 )
    (
        fiborunner - n 2  1 1 0
    )
)

// (
    let x 0
    while ( < x 10 )
    (
        println list ( "Fibonacci number " x " is: " fibo x )
        let x + x 1
    )
)

bind printlist lambda ( x ) ( )
(
    if ( < x 100000 )
    (
        println list ( "x is: " x )
        trec printlist + x 1
    )
    (
        42
    )
)

// (
    println list ( "The result of printlist is: " printlist 1 )
) 

let x 666
let y 999

bind tailA lambda ( x ) ( y )
(
    if ( < x 30000 )
    (
        println list ( "tailA: " x )
        trec tailB + x 1
    )
    (
        1
    )
)

bind tailB lambda ( y ) ( x )
(
    if ( < y 30000 )
    (
        println list ( "tailB: " y )
        trec tailA + y 1
    )
    (
        2
    )
)

// (
    println list ( "The result of tailA is: " tailA 1 )
    println list ( "X is: " x " Y is: " y )
)







